* {
  /*transition*/
  -webkit-transition: 0.25s ease-in-out;
  -moz-transition: 0.25s ease-in-out;
  -o-transition: 0.25s ease-in-out;
  transition: 0.25s ease-in-out;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  box-sizing: border-box;
  margin: 0;
  box-sizing: border-box;
}
body {
  background: #111110;
  margin: 0;
  padding: 0;
  color: white;
}
header {
  /*   This is a grid because I wanted to separate the header space in two different sized areas. 
  One for the logo and one for the navigation. Flex spaces everything evenly by default. This is controled easier with grid. */
  background: #111110;
  /* border: solid 1px white; */
  display: flex;
  /* I wanted the first column narrower  */
  grid-template-columns: 3fr 4fr;
  /*   I'm aligning the elements to the bottom of the area, but you can have them at the top or middle; */
  align-items: end;
  /*   In the navigation is ok to assign a pixel value because this can be maintained in all viewports. */
  height: 100px;
  color: white;
  padding: 1rem 3rem;
}
header div,
header nav {
  /* This is only so you can see the area */
  /* border: dotted 1px red; */
}

article,
footer {
  padding: 1rem 3rem;
  /* This is only so you can see the area */
  border: 1px white;
  border-style: solid none;
}
h1 {
  font-size: 38px;
  color: white;
  font-weight: normal;
  padding: 3px;
}

h2,
h3 {
  
  font-style: normal;
  font-weight: normal;
  color: white;
  font-size: 50px;
}

a {
  text-decoration: none;
  padding: 0px 5px;
}
nav ul {
  /*   In the navigation ul, it's better to use flex because I want all my elements distributed equally regardles of the sizes, so I'll leave the calculations to flex. */
  display: flex;
  /* you need to remove the bullets on the list */
  list-style: none;
  padding: 7px 20px;
  justify-content: space-between;
  height: 100%;
  color: white;
}
article {
  margin: 1rem 0;
  /* Also a grid because I want different widths */
  display: grid;
  grid-template-columns: 2fr 2fr;
}
article > div,
article > section {
  /* This is only so you can see the area */
  /* border: dotted 2px pink; */
}
.content1 {
  /* I could use flex or grid here, but with flex, the column that has more content will be wider. */
  /* I wanted the 3 columns of the same size */
  display: grid;
  /* grid-template-columns: repeat(3, 1fr); */
  gap: 2rem;
  font-size: 25px;
  padding: 75px;
}
.section2 
{
  font-family: Roboto;
  font-style: normal;
  font-weight: normal;
  font-size: 18px;


color: #FFFFFF;
  /* This section is part of the article grid and the grid-column setting makes the column take the whole width */
  grid-column: 1/3;
  /* And I create another grid inside the section.  */
  display: grid;
  /* grid-template-columns: 1fr 1fr; */
}
.section2 div,
.section2 p 
{
  /* This is only so you can see the area */
  /* border: dotted 2px green; */
}
/* .gallery {
  /* In this case I use flex because all the images are the same size */
  /* display: flex; */
  /* I need to add the flex-wrap because flex will try to fit them all in one row by default. */
  /* flex-wrap: wrap;
  gap: 2rem;
  justify-content: center;
} */ 
.section3 {
  grid-column: 1/3;
  display: grid;


  font-family: Roboto;
  font-style: normal;
  font-weight: normal;
  font-size: 18px;
  text-align: center;

color: #FFFFFF;

}
.news {
  margin-bottom: 2rem;
}
.news img {
  
  margin-right: 1rem;
}
/*  */
footer {
  /*   This is an easy flex if you dont want the 3 columns of the same size. Otherwise, use grid. */
  display: flex;
  justify-content: space-between;
}
footer h2,
footer p,
footer address {
  /* This is only so you can see the area */
  /* border: dotted 2px turquoise; */
}

#pakimg {
  border-radius: 50%;
  max-width: 7%;
  height: auto;
}

#cubes {
  max-width: 65%;
  height: auto;
  padding: 25px;
}

a img {
  display: inline-block;
  height: 25px;
 
}
